{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\n\nvar MDCTabFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCTabFoundation, _super);\n\n  function MDCTabFoundation(adapter) {\n    var _this = _super.call(this, __assign(__assign({}, MDCTabFoundation.defaultAdapter), adapter)) || this;\n\n    _this.focusOnActivate_ = true;\n    return _this;\n  }\n\n  Object.defineProperty(MDCTabFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTabFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTabFoundation, \"defaultAdapter\", {\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return false;\n        },\n        setAttr: function () {\n          return undefined;\n        },\n        activateIndicator: function () {\n          return undefined;\n        },\n        deactivateIndicator: function () {\n          return undefined;\n        },\n        notifyInteracted: function () {\n          return undefined;\n        },\n        getOffsetLeft: function () {\n          return 0;\n        },\n        getOffsetWidth: function () {\n          return 0;\n        },\n        getContentOffsetLeft: function () {\n          return 0;\n        },\n        getContentOffsetWidth: function () {\n          return 0;\n        },\n        focus: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MDCTabFoundation.prototype.handleClick = function () {\n    // It's up to the parent component to keep track of the active Tab and\n    // ensure we don't activate a Tab that's already active.\n    this.adapter.notifyInteracted();\n  };\n\n  MDCTabFoundation.prototype.isActive = function () {\n    return this.adapter.hasClass(cssClasses.ACTIVE);\n  };\n  /**\n   * Sets whether the tab should focus itself when activated\n   */\n\n\n  MDCTabFoundation.prototype.setFocusOnActivate = function (focusOnActivate) {\n    this.focusOnActivate_ = focusOnActivate;\n  };\n  /**\n   * Activates the Tab\n   */\n\n\n  MDCTabFoundation.prototype.activate = function (previousIndicatorClientRect) {\n    this.adapter.addClass(cssClasses.ACTIVE);\n    this.adapter.setAttr(strings.ARIA_SELECTED, 'true');\n    this.adapter.setAttr(strings.TABINDEX, '0');\n    this.adapter.activateIndicator(previousIndicatorClientRect);\n\n    if (this.focusOnActivate_) {\n      this.adapter.focus();\n    }\n  };\n  /**\n   * Deactivates the Tab\n   */\n\n\n  MDCTabFoundation.prototype.deactivate = function () {\n    // Early exit\n    if (!this.isActive()) {\n      return;\n    }\n\n    this.adapter.removeClass(cssClasses.ACTIVE);\n    this.adapter.setAttr(strings.ARIA_SELECTED, 'false');\n    this.adapter.setAttr(strings.TABINDEX, '-1');\n    this.adapter.deactivateIndicator();\n  };\n  /**\n   * Returns the dimensions of the Tab\n   */\n\n\n  MDCTabFoundation.prototype.computeDimensions = function () {\n    var rootWidth = this.adapter.getOffsetWidth();\n    var rootLeft = this.adapter.getOffsetLeft();\n    var contentWidth = this.adapter.getContentOffsetWidth();\n    var contentLeft = this.adapter.getContentOffsetLeft();\n    return {\n      contentLeft: rootLeft + contentLeft,\n      contentRight: rootLeft + contentLeft + contentWidth,\n      rootLeft: rootLeft,\n      rootRight: rootLeft + rootWidth\n    };\n  };\n\n  return MDCTabFoundation;\n}(MDCFoundation);\n\nexport { MDCTabFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCTabFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nvar MDCTabFoundation = /** @class */ (function (_super) {\n    __extends(MDCTabFoundation, _super);\n    function MDCTabFoundation(adapter) {\n        var _this = _super.call(this, __assign(__assign({}, MDCTabFoundation.defaultAdapter), adapter)) || this;\n        _this.focusOnActivate_ = true;\n        return _this;\n    }\n    Object.defineProperty(MDCTabFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTabFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTabFoundation, \"defaultAdapter\", {\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                addClass: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                hasClass: function () { return false; },\n                setAttr: function () { return undefined; },\n                activateIndicator: function () { return undefined; },\n                deactivateIndicator: function () { return undefined; },\n                notifyInteracted: function () { return undefined; },\n                getOffsetLeft: function () { return 0; },\n                getOffsetWidth: function () { return 0; },\n                getContentOffsetLeft: function () { return 0; },\n                getContentOffsetWidth: function () { return 0; },\n                focus: function () { return undefined; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCTabFoundation.prototype.handleClick = function () {\n        // It's up to the parent component to keep track of the active Tab and\n        // ensure we don't activate a Tab that's already active.\n        this.adapter.notifyInteracted();\n    };\n    MDCTabFoundation.prototype.isActive = function () {\n        return this.adapter.hasClass(cssClasses.ACTIVE);\n    };\n    /**\n     * Sets whether the tab should focus itself when activated\n     */\n    MDCTabFoundation.prototype.setFocusOnActivate = function (focusOnActivate) {\n        this.focusOnActivate_ = focusOnActivate;\n    };\n    /**\n     * Activates the Tab\n     */\n    MDCTabFoundation.prototype.activate = function (previousIndicatorClientRect) {\n        this.adapter.addClass(cssClasses.ACTIVE);\n        this.adapter.setAttr(strings.ARIA_SELECTED, 'true');\n        this.adapter.setAttr(strings.TABINDEX, '0');\n        this.adapter.activateIndicator(previousIndicatorClientRect);\n        if (this.focusOnActivate_) {\n            this.adapter.focus();\n        }\n    };\n    /**\n     * Deactivates the Tab\n     */\n    MDCTabFoundation.prototype.deactivate = function () {\n        // Early exit\n        if (!this.isActive()) {\n            return;\n        }\n        this.adapter.removeClass(cssClasses.ACTIVE);\n        this.adapter.setAttr(strings.ARIA_SELECTED, 'false');\n        this.adapter.setAttr(strings.TABINDEX, '-1');\n        this.adapter.deactivateIndicator();\n    };\n    /**\n     * Returns the dimensions of the Tab\n     */\n    MDCTabFoundation.prototype.computeDimensions = function () {\n        var rootWidth = this.adapter.getOffsetWidth();\n        var rootLeft = this.adapter.getOffsetLeft();\n        var contentWidth = this.adapter.getContentOffsetWidth();\n        var contentLeft = this.adapter.getContentOffsetLeft();\n        return {\n            contentLeft: rootLeft + contentLeft,\n            contentRight: rootLeft + contentLeft + contentWidth,\n            rootLeft: rootLeft,\n            rootRight: rootLeft + rootWidth,\n        };\n    };\n    return MDCTabFoundation;\n}(MDCFoundation));\nexport { MDCTabFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCTabFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}