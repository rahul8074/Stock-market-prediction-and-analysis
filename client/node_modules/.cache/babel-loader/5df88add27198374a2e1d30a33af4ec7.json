{"ast":null,"code":"var _jsxFileName = \"D:\\\\PGR-project\\\\client\\\\src\\\\components\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport axios from \"axios\";\nimport TablePagination from '@material-ui/core/TablePagination';\nimport './Style/Table.css';\nimport PGRprdiction from './PGRprdiction';\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 18,\n    color: 'black',\n    fontFamily: 'vardana'\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover\n    }\n  }\n}))(TableRow);\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700\n  },\n  root: {\n    width: '100%'\n  },\n  container: {\n    maxHeight: 440\n  }\n});\nexport default function Tables({\n  history,\n  name\n}) {\n  _s();\n\n  console.log(name);\n  const classes = useStyles();\n  const [data, setdata] = useState([]);\n  const [header, setheader] = useState([]);\n  let {\n    id\n  } = useParams();\n  const [loading, setloading] = useState(false);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10); //handling Pridictions states\n\n  const [Ppsar, setPpsar] = useState({\n    first: '',\n    second: ''\n  });\n  const [Padx, setPadx] = useState({\n    adx: '',\n    plusDi: '',\n    minsDi: ''\n  });\n  const [Prsi, setPrsi] = useState({\n    first: '',\n    second: ''\n  });\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  useEffect(function () {\n    const headers = {\n      \"Access-Control-Allow-Origin\": \"*\"\n    };\n    setloading(true);\n    axios.get(`http://localhost:9000/users/data/${name}`, {\n      headers\n    }).then(res => {\n      setdata(res.data.data[id]); //handling setprediction state through /:id\n\n      if (id == 'psar') {\n        setPpsar({\n          first: res.data.data[id][1][1],\n          second: res.data.data[id][2][1]\n        });\n      }\n\n      if (id == 'adx') {\n        setPadx({\n          adx: res.data.data[id][1][2],\n          plusDi: res.data.data[id][1][3],\n          minusDi: res.data.data[id][1][4]\n        });\n      }\n\n      if (id == 'rsi') {\n        setPrsi({\n          first: res.data.data[id][1][2],\n          second: res.data.data[id][2][2]\n        });\n      }\n\n      let arr = [];\n      Object.values(res.data.data[id][0]).map((item, index) => arr.push(item));\n      setheader(arr);\n      setloading(false);\n    }).catch(err => {\n      setloading(false);\n      console.log(\"error\");\n    });\n  }, [history.location.pathname, name]);\n  console.log('THis is psar pr', Prsi); // handling predictions data of individual section ex:psar adx\n\n  const pre = () => {\n    if (id == 'psar') {\n      if (Ppsar.first > Ppsar.second) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: 'green'\n            },\n            children: \"Increment \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\"\n            },\n            children: \"Decrement\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }, this);\n      }\n    }\n  };\n\n  function replace(object) {\n    let newobj = {};\n    Object.values(object).map((item, index) => newobj[header[index]] = item);\n    return newobj;\n  }\n\n  const finalans = [];\n  const rows = header.length > 0 ? data.slice(1).map(item => replace(item)) : [];\n  console.log(data);\n  return loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '30vh',\n      display: 'flex',\n      width: '100%',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n      style: {\n        width: \"60px\",\n        height: \"60px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 15\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"PGR Prediction:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 17\n        }, this), pre()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"PGR Final Prediction:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        className: classes.table,\n        \"aria-label\": \"customized table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: header.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: header.map((item, index) => /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                id: index,\n                children: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 3\n              }, this))\n            }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => /*#__PURE__*/_jsxDEV(StyledTableRow, {\n            children: header.map((i, subindex) => /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              children: row[i]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 20\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 16\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n        rowsPerPageOptions: [10, 25, 100],\n        component: \"div\",\n        count: rows.length,\n        rowsPerPage: rowsPerPage,\n        page: page,\n        onChangePage: handleChangePage,\n        onChangeRowsPerPage: handleChangeRowsPerPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Tables, \"gEnjjusrd5juN2bpC2ruVjPDzQU=\", false, function () {\n  return [useStyles, useParams];\n});\n\n_c = Tables;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tables\");","map":{"version":3,"sources":["D:/PGR-project/client/src/components/Table.js"],"names":["React","useEffect","useState","withStyles","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","CircularProgress","TableRow","Paper","axios","TablePagination","PGRprdiction","useParams","StyledTableCell","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","fontFamily","StyledTableRow","root","action","hover","useStyles","table","minWidth","width","container","maxHeight","Tables","history","name","console","log","classes","data","setdata","header","setheader","id","loading","setloading","page","setPage","rowsPerPage","setRowsPerPage","Ppsar","setPpsar","first","second","Padx","setPadx","adx","plusDi","minsDi","Prsi","setPrsi","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","headers","get","then","res","minusDi","arr","Object","values","map","item","index","push","catch","err","location","pathname","pre","replace","object","newobj","finalans","rows","length","slice","height","display","justifyContent","alignItems","row","i","subindex"],"mappings":"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","sourcesContent":["import React ,{useEffect,useState}from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport axios from \"axios\";\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nimport './Style/Table.css';\r\n\r\nimport PGRprdiction from './PGRprdiction';\r\n \r\n\r\nimport {\r\n  useParams,\r\n} from \"react-router-dom\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 18,\r\n    color:'black',\r\n    fontFamily:'vardana',\r\n      },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n   root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nexport default function Tables({history,name}) {\r\n\r\n  console.log(name)\r\n\r\n  const classes = useStyles();\r\n  const [data,setdata]=useState([]);\r\n  const [header,setheader]=useState([]);\r\n let {id} = useParams();\r\nconst [loading,setloading]=useState(false);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  \r\n  //handling Pridictions states\r\n  const [Ppsar,setPpsar] = useState({\r\n    first:'',\r\n    second:''\r\n\r\n  });\r\n  const [Padx,setPadx] = useState({\r\n    adx:'',\r\n    plusDi:'',\r\n    minsDi:''\r\n\r\n  });\r\n  const [Prsi,setPrsi] = useState({\r\n    first:'',\r\n    second:''\r\n\r\n  });\r\n   \r\n  \r\n\r\n\r\n \r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n \r\n\r\nuseEffect(function(){\r\n   const headers={\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n   }\r\n   setloading(true);\r\n axios.get(`http://localhost:9000/users/data/${name}`,{\r\n        headers}).then(\r\n        (res)=>{\r\n          setdata(res.data.data[id]);\r\n\r\n          \r\n          //handling setprediction state through /:id\r\n          if(id=='psar'){\r\n            setPpsar({\r\n              first:res.data.data[id][1][1],\r\n              second:res.data.data[id][2][1]\r\n            })\r\n          }\r\n          if(id=='adx'){\r\n            setPadx({\r\n              adx:res.data.data[id][1][2],\r\n              plusDi:res.data.data[id][1][3],\r\n              minusDi:res.data.data[id][1][4],\r\n            })\r\n          }\r\n          if(id=='rsi'){\r\n            setPrsi({\r\n              first:res.data.data[id][1][2],\r\n              second:res.data.data[id][2][2],\r\n            })\r\n          }\r\n          \r\n          \r\n\r\n\r\n\r\n\r\n          let arr=[];\r\n          Object.values(res.data.data[id][0]).map((item,index) => (\r\n             arr.push(item)\r\n              ))\r\n          setheader(arr);\r\n          setloading(false);\r\n\r\n      \r\n        })\r\n        .catch((err)=>{\r\n          setloading(false);\r\n        console.log(\"error\");\r\n        })\r\n\r\n\r\n      },[history.location.pathname,name])    \r\n\r\nconsole.log('THis is psar pr',Prsi);\r\n \r\n\r\n\r\n\r\n\r\n// handling predictions data of individual section ex:psar adx\r\nconst pre =()=>{\r\n  if(id=='psar'){\r\n    if(Ppsar.first>Ppsar.second){\r\n        return(\r\n          <div>\r\n            <p style={{color:'green'}}>Increment </p>\r\n          </div>\r\n        )\r\n    }\r\n    else{\r\n      return(\r\n        <div>\r\n          <p style={{color:\"red\"}} >Decrement</p>\r\n        </div>\r\n      )\r\n    }\r\n}\r\n}\r\nfunction replace(object){\r\n  let newobj={};\r\n   Object.values(object).map((item,index) => (\r\n             newobj[header[index]]=item\r\n              ))\r\n  return newobj;\r\n}\r\n\r\n\r\nconst finalans=[];\r\nconst rows = \r\n header.length>0 ? data.slice(1).map((item) => \r\n        replace(item) )\r\n:\r\n[]\r\n;\r\nconsole.log(data);\r\n\r\n  return (\r\n      loading ? (\r\n              <div\r\n                style={{\r\n                  height: '30vh',\r\n                  display: 'flex',\r\n                  width: '100%',\r\n                  justifyContent: 'center',\r\n                  alignItems: 'center',\r\n                }}\r\n              >\r\n              <CircularProgress\r\n              style={{width:\"60px\",height:\"60px\"}}\r\n      />\r\n              </div>\r\n            ) : (\r\n              <>\r\n              {/* Calling PGR Prediction section here */}\r\n                  <div>\r\n            \r\n            <div>\r\n                <h5>\r\n                  PGR Prediction:\r\n                </h5>\r\n                {pre()}\r\n              </div>\r\n              <br></br>\r\n              <br></br>\r\n              <hr></hr>\r\n              <div>\r\n                <h5>\r\n                  PGR Final Prediction:\r\n                </h5>\r\n              </div>\r\n             <br></br>\r\n             <br></br>\r\n          \r\n        </div>\r\n\r\n\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n\r\n            {header.length > 0 ? \r\n            <>\r\n            {header.map((item,index) => (\r\n  <StyledTableCell id={index}>{item}</StyledTableCell>\r\n              ))}\r\n            </> \r\n            :\r\n            <>\r\n            </>\r\n             }\r\n        \r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n         {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row,index) => \r\n               <StyledTableRow key={index}>\r\n            { \r\n              header.map((i, subindex) =>\r\n                   <StyledTableCell >{row[i]}</StyledTableCell>)\r\n            }\r\n </StyledTableRow>\r\n            )}\r\n       </TableBody>\r\n      </Table>\r\n        <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </TableContainer>\r\n    </>\r\n    )\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}