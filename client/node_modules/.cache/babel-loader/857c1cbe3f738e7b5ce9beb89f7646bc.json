{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __read } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nimport { MDCTabScrollerRTLDefault } from './rtl-default-scroller';\nimport { MDCTabScrollerRTLNegative } from './rtl-negative-scroller';\nimport { MDCTabScrollerRTLReverse } from './rtl-reverse-scroller';\n\nvar MDCTabScrollerFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCTabScrollerFoundation, _super);\n\n  function MDCTabScrollerFoundation(adapter) {\n    var _this = _super.call(this, __assign(__assign({}, MDCTabScrollerFoundation.defaultAdapter), adapter)) || this;\n    /**\n     * Controls whether we should handle the transitionend and interaction events during the animation.\n     */\n\n\n    _this.isAnimating_ = false;\n    return _this;\n  }\n\n  Object.defineProperty(MDCTabScrollerFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTabScrollerFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTabScrollerFoundation, \"defaultAdapter\", {\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        eventTargetMatchesSelector: function () {\n          return false;\n        },\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        addScrollAreaClass: function () {\n          return undefined;\n        },\n        setScrollAreaStyleProperty: function () {\n          return undefined;\n        },\n        setScrollContentStyleProperty: function () {\n          return undefined;\n        },\n        getScrollContentStyleValue: function () {\n          return '';\n        },\n        setScrollAreaScrollLeft: function () {\n          return undefined;\n        },\n        getScrollAreaScrollLeft: function () {\n          return 0;\n        },\n        getScrollContentOffsetWidth: function () {\n          return 0;\n        },\n        getScrollAreaOffsetWidth: function () {\n          return 0;\n        },\n        computeScrollAreaClientRect: function () {\n          return {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            width: 0,\n            height: 0\n          };\n        },\n        computeScrollContentClientRect: function () {\n          return {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            width: 0,\n            height: 0\n          };\n        },\n        computeHorizontalScrollbarHeight: function () {\n          return 0;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MDCTabScrollerFoundation.prototype.init = function () {\n    // Compute horizontal scrollbar height on scroller with overflow initially hidden, then update overflow to scroll\n    // and immediately adjust bottom margin to avoid the scrollbar initially appearing before JS runs.\n    var horizontalScrollbarHeight = this.adapter.computeHorizontalScrollbarHeight();\n    this.adapter.setScrollAreaStyleProperty('margin-bottom', -horizontalScrollbarHeight + 'px');\n    this.adapter.addScrollAreaClass(MDCTabScrollerFoundation.cssClasses.SCROLL_AREA_SCROLL);\n  };\n  /**\n   * Computes the current visual scroll position\n   */\n\n\n  MDCTabScrollerFoundation.prototype.getScrollPosition = function () {\n    if (this.isRTL_()) {\n      return this.computeCurrentScrollPositionRTL_();\n    }\n\n    var currentTranslateX = this.calculateCurrentTranslateX_();\n    var scrollLeft = this.adapter.getScrollAreaScrollLeft();\n    return scrollLeft - currentTranslateX;\n  };\n  /**\n   * Handles interaction events that occur during transition\n   */\n\n\n  MDCTabScrollerFoundation.prototype.handleInteraction = function () {\n    // Early exit if we aren't animating\n    if (!this.isAnimating_) {\n      return;\n    } // Prevent other event listeners from handling this event\n\n\n    this.stopScrollAnimation_();\n  };\n  /**\n   * Handles the transitionend event\n   */\n\n\n  MDCTabScrollerFoundation.prototype.handleTransitionEnd = function (evt) {\n    // Early exit if we aren't animating or the event was triggered by a different element.\n    var evtTarget = evt.target;\n\n    if (!this.isAnimating_ || !this.adapter.eventTargetMatchesSelector(evtTarget, MDCTabScrollerFoundation.strings.CONTENT_SELECTOR)) {\n      return;\n    }\n\n    this.isAnimating_ = false;\n    this.adapter.removeClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);\n  };\n  /**\n   * Increment the scroll value by the scrollXIncrement using animation.\n   * @param scrollXIncrement The value by which to increment the scroll position\n   */\n\n\n  MDCTabScrollerFoundation.prototype.incrementScroll = function (scrollXIncrement) {\n    // Early exit for non-operational increment values\n    if (scrollXIncrement === 0) {\n      return;\n    }\n\n    this.animate_(this.getIncrementScrollOperation_(scrollXIncrement));\n  };\n  /**\n   * Increment the scroll value by the scrollXIncrement without animation.\n   * @param scrollXIncrement The value by which to increment the scroll position\n   */\n\n\n  MDCTabScrollerFoundation.prototype.incrementScrollImmediate = function (scrollXIncrement) {\n    // Early exit for non-operational increment values\n    if (scrollXIncrement === 0) {\n      return;\n    }\n\n    var operation = this.getIncrementScrollOperation_(scrollXIncrement);\n\n    if (operation.scrollDelta === 0) {\n      return;\n    }\n\n    this.stopScrollAnimation_();\n    this.adapter.setScrollAreaScrollLeft(operation.finalScrollPosition);\n  };\n  /**\n   * Scrolls to the given scrollX value\n   */\n\n\n  MDCTabScrollerFoundation.prototype.scrollTo = function (scrollX) {\n    if (this.isRTL_()) {\n      return this.scrollToRTL_(scrollX);\n    }\n\n    this.scrollTo_(scrollX);\n  };\n  /**\n   * @return Browser-specific {@link MDCTabScrollerRTL} instance.\n   */\n\n\n  MDCTabScrollerFoundation.prototype.getRTLScroller = function () {\n    if (!this.rtlScrollerInstance_) {\n      this.rtlScrollerInstance_ = this.rtlScrollerFactory_();\n    }\n\n    return this.rtlScrollerInstance_;\n  };\n  /**\n   * @return translateX value from a CSS matrix transform function string.\n   */\n\n\n  MDCTabScrollerFoundation.prototype.calculateCurrentTranslateX_ = function () {\n    var transformValue = this.adapter.getScrollContentStyleValue('transform'); // Early exit if no transform is present\n\n    if (transformValue === 'none') {\n      return 0;\n    } // The transform value comes back as a matrix transformation in the form\n    // of `matrix(a, b, c, d, tx, ty)`. We only care about tx (translateX) so\n    // we're going to grab all the parenthesized values, strip out tx, and\n    // parse it.\n\n\n    var match = /\\((.+?)\\)/.exec(transformValue);\n\n    if (!match) {\n      return 0;\n    }\n\n    var matrixParams = match[1]; // tslint:disable-next-line:ban-ts-ignore \"Unused vars\" should be a linter warning, not a compiler error.\n    // @ts-ignore These unused variables should retain their semantic names for clarity.\n\n    var _a = __read(matrixParams.split(','), 6),\n        a = _a[0],\n        b = _a[1],\n        c = _a[2],\n        d = _a[3],\n        tx = _a[4],\n        ty = _a[5];\n\n    return parseFloat(tx); // tslint:disable-line:ban\n  };\n  /**\n   * Calculates a safe scroll value that is > 0 and < the max scroll value\n   * @param scrollX The distance to scroll\n   */\n\n\n  MDCTabScrollerFoundation.prototype.clampScrollValue_ = function (scrollX) {\n    var edges = this.calculateScrollEdges_();\n    return Math.min(Math.max(edges.left, scrollX), edges.right);\n  };\n\n  MDCTabScrollerFoundation.prototype.computeCurrentScrollPositionRTL_ = function () {\n    var translateX = this.calculateCurrentTranslateX_();\n    return this.getRTLScroller().getScrollPositionRTL(translateX);\n  };\n\n  MDCTabScrollerFoundation.prototype.calculateScrollEdges_ = function () {\n    var contentWidth = this.adapter.getScrollContentOffsetWidth();\n    var rootWidth = this.adapter.getScrollAreaOffsetWidth();\n    return {\n      left: 0,\n      right: contentWidth - rootWidth\n    };\n  };\n  /**\n   * Internal scroll method\n   * @param scrollX The new scroll position\n   */\n\n\n  MDCTabScrollerFoundation.prototype.scrollTo_ = function (scrollX) {\n    var currentScrollX = this.getScrollPosition();\n    var safeScrollX = this.clampScrollValue_(scrollX);\n    var scrollDelta = safeScrollX - currentScrollX;\n    this.animate_({\n      finalScrollPosition: safeScrollX,\n      scrollDelta: scrollDelta\n    });\n  };\n  /**\n   * Internal RTL scroll method\n   * @param scrollX The new scroll position\n   */\n\n\n  MDCTabScrollerFoundation.prototype.scrollToRTL_ = function (scrollX) {\n    var animation = this.getRTLScroller().scrollToRTL(scrollX);\n    this.animate_(animation);\n  };\n  /**\n   * Internal method to compute the increment scroll operation values.\n   * @param scrollX The desired scroll position increment\n   * @return MDCTabScrollerAnimation with the sanitized values for performing the scroll operation.\n   */\n\n\n  MDCTabScrollerFoundation.prototype.getIncrementScrollOperation_ = function (scrollX) {\n    if (this.isRTL_()) {\n      return this.getRTLScroller().incrementScrollRTL(scrollX);\n    }\n\n    var currentScrollX = this.getScrollPosition();\n    var targetScrollX = scrollX + currentScrollX;\n    var safeScrollX = this.clampScrollValue_(targetScrollX);\n    var scrollDelta = safeScrollX - currentScrollX;\n    return {\n      finalScrollPosition: safeScrollX,\n      scrollDelta: scrollDelta\n    };\n  };\n  /**\n   * Animates the tab scrolling\n   * @param animation The animation to apply\n   */\n\n\n  MDCTabScrollerFoundation.prototype.animate_ = function (animation) {\n    var _this = this; // Early exit if translateX is 0, which means there's no animation to perform\n\n\n    if (animation.scrollDelta === 0) {\n      return;\n    }\n\n    this.stopScrollAnimation_(); // This animation uses the FLIP approach.\n    // Read more here: https://aerotwist.com/blog/flip-your-animations/\n\n    this.adapter.setScrollAreaScrollLeft(animation.finalScrollPosition);\n    this.adapter.setScrollContentStyleProperty('transform', \"translateX(\" + animation.scrollDelta + \"px)\"); // Force repaint\n\n    this.adapter.computeScrollAreaClientRect();\n    requestAnimationFrame(function () {\n      _this.adapter.addClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);\n\n      _this.adapter.setScrollContentStyleProperty('transform', 'none');\n    });\n    this.isAnimating_ = true;\n  };\n  /**\n   * Stops scroll animation\n   */\n\n\n  MDCTabScrollerFoundation.prototype.stopScrollAnimation_ = function () {\n    this.isAnimating_ = false;\n    var currentScrollPosition = this.getAnimatingScrollPosition_();\n    this.adapter.removeClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);\n    this.adapter.setScrollContentStyleProperty('transform', 'translateX(0px)');\n    this.adapter.setScrollAreaScrollLeft(currentScrollPosition);\n  };\n  /**\n   * Gets the current scroll position during animation\n   */\n\n\n  MDCTabScrollerFoundation.prototype.getAnimatingScrollPosition_ = function () {\n    var currentTranslateX = this.calculateCurrentTranslateX_();\n    var scrollLeft = this.adapter.getScrollAreaScrollLeft();\n\n    if (this.isRTL_()) {\n      return this.getRTLScroller().getAnimatingScrollPosition(scrollLeft, currentTranslateX);\n    }\n\n    return scrollLeft - currentTranslateX;\n  };\n  /**\n   * Determines the RTL Scroller to use\n   */\n\n\n  MDCTabScrollerFoundation.prototype.rtlScrollerFactory_ = function () {\n    // Browsers have three different implementations of scrollLeft in RTL mode,\n    // dependent on the browser. The behavior is based off the max LTR\n    // scrollLeft value and 0.\n    //\n    // * Default scrolling in RTL *\n    //    - Left-most value: 0\n    //    - Right-most value: Max LTR scrollLeft value\n    //\n    // * Negative scrolling in RTL *\n    //    - Left-most value: Negated max LTR scrollLeft value\n    //    - Right-most value: 0\n    //\n    // * Reverse scrolling in RTL *\n    //    - Left-most value: Max LTR scrollLeft value\n    //    - Right-most value: 0\n    //\n    // We use those principles below to determine which RTL scrollLeft\n    // behavior is implemented in the current browser.\n    var initialScrollLeft = this.adapter.getScrollAreaScrollLeft();\n    this.adapter.setScrollAreaScrollLeft(initialScrollLeft - 1);\n    var newScrollLeft = this.adapter.getScrollAreaScrollLeft(); // If the newScrollLeft value is negative,then we know that the browser has\n    // implemented negative RTL scrolling, since all other implementations have\n    // only positive values.\n\n    if (newScrollLeft < 0) {\n      // Undo the scrollLeft test check\n      this.adapter.setScrollAreaScrollLeft(initialScrollLeft);\n      return new MDCTabScrollerRTLNegative(this.adapter);\n    }\n\n    var rootClientRect = this.adapter.computeScrollAreaClientRect();\n    var contentClientRect = this.adapter.computeScrollContentClientRect();\n    var rightEdgeDelta = Math.round(contentClientRect.right - rootClientRect.right); // Undo the scrollLeft test check\n\n    this.adapter.setScrollAreaScrollLeft(initialScrollLeft); // By calculating the clientRect of the root element and the clientRect of\n    // the content element, we can determine how much the scroll value changed\n    // when we performed the scrollLeft subtraction above.\n\n    if (rightEdgeDelta === newScrollLeft) {\n      return new MDCTabScrollerRTLReverse(this.adapter);\n    }\n\n    return new MDCTabScrollerRTLDefault(this.adapter);\n  };\n\n  MDCTabScrollerFoundation.prototype.isRTL_ = function () {\n    return this.adapter.getScrollContentStyleValue('direction') === 'rtl';\n  };\n\n  return MDCTabScrollerFoundation;\n}(MDCFoundation);\n\nexport { MDCTabScrollerFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCTabScrollerFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __read } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nimport { MDCTabScrollerRTLDefault } from './rtl-default-scroller';\nimport { MDCTabScrollerRTLNegative } from './rtl-negative-scroller';\nimport { MDCTabScrollerRTLReverse } from './rtl-reverse-scroller';\nvar MDCTabScrollerFoundation = /** @class */ (function (_super) {\n    __extends(MDCTabScrollerFoundation, _super);\n    function MDCTabScrollerFoundation(adapter) {\n        var _this = _super.call(this, __assign(__assign({}, MDCTabScrollerFoundation.defaultAdapter), adapter)) || this;\n        /**\n         * Controls whether we should handle the transitionend and interaction events during the animation.\n         */\n        _this.isAnimating_ = false;\n        return _this;\n    }\n    Object.defineProperty(MDCTabScrollerFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTabScrollerFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTabScrollerFoundation, \"defaultAdapter\", {\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                eventTargetMatchesSelector: function () { return false; },\n                addClass: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                addScrollAreaClass: function () { return undefined; },\n                setScrollAreaStyleProperty: function () { return undefined; },\n                setScrollContentStyleProperty: function () { return undefined; },\n                getScrollContentStyleValue: function () { return ''; },\n                setScrollAreaScrollLeft: function () { return undefined; },\n                getScrollAreaScrollLeft: function () { return 0; },\n                getScrollContentOffsetWidth: function () { return 0; },\n                getScrollAreaOffsetWidth: function () { return 0; },\n                computeScrollAreaClientRect: function () { return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 }); },\n                computeScrollContentClientRect: function () { return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 }); },\n                computeHorizontalScrollbarHeight: function () { return 0; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCTabScrollerFoundation.prototype.init = function () {\n        // Compute horizontal scrollbar height on scroller with overflow initially hidden, then update overflow to scroll\n        // and immediately adjust bottom margin to avoid the scrollbar initially appearing before JS runs.\n        var horizontalScrollbarHeight = this.adapter.computeHorizontalScrollbarHeight();\n        this.adapter.setScrollAreaStyleProperty('margin-bottom', -horizontalScrollbarHeight + 'px');\n        this.adapter.addScrollAreaClass(MDCTabScrollerFoundation.cssClasses.SCROLL_AREA_SCROLL);\n    };\n    /**\n     * Computes the current visual scroll position\n     */\n    MDCTabScrollerFoundation.prototype.getScrollPosition = function () {\n        if (this.isRTL_()) {\n            return this.computeCurrentScrollPositionRTL_();\n        }\n        var currentTranslateX = this.calculateCurrentTranslateX_();\n        var scrollLeft = this.adapter.getScrollAreaScrollLeft();\n        return scrollLeft - currentTranslateX;\n    };\n    /**\n     * Handles interaction events that occur during transition\n     */\n    MDCTabScrollerFoundation.prototype.handleInteraction = function () {\n        // Early exit if we aren't animating\n        if (!this.isAnimating_) {\n            return;\n        }\n        // Prevent other event listeners from handling this event\n        this.stopScrollAnimation_();\n    };\n    /**\n     * Handles the transitionend event\n     */\n    MDCTabScrollerFoundation.prototype.handleTransitionEnd = function (evt) {\n        // Early exit if we aren't animating or the event was triggered by a different element.\n        var evtTarget = evt.target;\n        if (!this.isAnimating_ ||\n            !this.adapter.eventTargetMatchesSelector(evtTarget, MDCTabScrollerFoundation.strings.CONTENT_SELECTOR)) {\n            return;\n        }\n        this.isAnimating_ = false;\n        this.adapter.removeClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);\n    };\n    /**\n     * Increment the scroll value by the scrollXIncrement using animation.\n     * @param scrollXIncrement The value by which to increment the scroll position\n     */\n    MDCTabScrollerFoundation.prototype.incrementScroll = function (scrollXIncrement) {\n        // Early exit for non-operational increment values\n        if (scrollXIncrement === 0) {\n            return;\n        }\n        this.animate_(this.getIncrementScrollOperation_(scrollXIncrement));\n    };\n    /**\n     * Increment the scroll value by the scrollXIncrement without animation.\n     * @param scrollXIncrement The value by which to increment the scroll position\n     */\n    MDCTabScrollerFoundation.prototype.incrementScrollImmediate = function (scrollXIncrement) {\n        // Early exit for non-operational increment values\n        if (scrollXIncrement === 0) {\n            return;\n        }\n        var operation = this.getIncrementScrollOperation_(scrollXIncrement);\n        if (operation.scrollDelta === 0) {\n            return;\n        }\n        this.stopScrollAnimation_();\n        this.adapter.setScrollAreaScrollLeft(operation.finalScrollPosition);\n    };\n    /**\n     * Scrolls to the given scrollX value\n     */\n    MDCTabScrollerFoundation.prototype.scrollTo = function (scrollX) {\n        if (this.isRTL_()) {\n            return this.scrollToRTL_(scrollX);\n        }\n        this.scrollTo_(scrollX);\n    };\n    /**\n     * @return Browser-specific {@link MDCTabScrollerRTL} instance.\n     */\n    MDCTabScrollerFoundation.prototype.getRTLScroller = function () {\n        if (!this.rtlScrollerInstance_) {\n            this.rtlScrollerInstance_ = this.rtlScrollerFactory_();\n        }\n        return this.rtlScrollerInstance_;\n    };\n    /**\n     * @return translateX value from a CSS matrix transform function string.\n     */\n    MDCTabScrollerFoundation.prototype.calculateCurrentTranslateX_ = function () {\n        var transformValue = this.adapter.getScrollContentStyleValue('transform');\n        // Early exit if no transform is present\n        if (transformValue === 'none') {\n            return 0;\n        }\n        // The transform value comes back as a matrix transformation in the form\n        // of `matrix(a, b, c, d, tx, ty)`. We only care about tx (translateX) so\n        // we're going to grab all the parenthesized values, strip out tx, and\n        // parse it.\n        var match = /\\((.+?)\\)/.exec(transformValue);\n        if (!match) {\n            return 0;\n        }\n        var matrixParams = match[1];\n        // tslint:disable-next-line:ban-ts-ignore \"Unused vars\" should be a linter warning, not a compiler error.\n        // @ts-ignore These unused variables should retain their semantic names for clarity.\n        var _a = __read(matrixParams.split(','), 6), a = _a[0], b = _a[1], c = _a[2], d = _a[3], tx = _a[4], ty = _a[5];\n        return parseFloat(tx); // tslint:disable-line:ban\n    };\n    /**\n     * Calculates a safe scroll value that is > 0 and < the max scroll value\n     * @param scrollX The distance to scroll\n     */\n    MDCTabScrollerFoundation.prototype.clampScrollValue_ = function (scrollX) {\n        var edges = this.calculateScrollEdges_();\n        return Math.min(Math.max(edges.left, scrollX), edges.right);\n    };\n    MDCTabScrollerFoundation.prototype.computeCurrentScrollPositionRTL_ = function () {\n        var translateX = this.calculateCurrentTranslateX_();\n        return this.getRTLScroller().getScrollPositionRTL(translateX);\n    };\n    MDCTabScrollerFoundation.prototype.calculateScrollEdges_ = function () {\n        var contentWidth = this.adapter.getScrollContentOffsetWidth();\n        var rootWidth = this.adapter.getScrollAreaOffsetWidth();\n        return {\n            left: 0,\n            right: contentWidth - rootWidth,\n        };\n    };\n    /**\n     * Internal scroll method\n     * @param scrollX The new scroll position\n     */\n    MDCTabScrollerFoundation.prototype.scrollTo_ = function (scrollX) {\n        var currentScrollX = this.getScrollPosition();\n        var safeScrollX = this.clampScrollValue_(scrollX);\n        var scrollDelta = safeScrollX - currentScrollX;\n        this.animate_({\n            finalScrollPosition: safeScrollX,\n            scrollDelta: scrollDelta,\n        });\n    };\n    /**\n     * Internal RTL scroll method\n     * @param scrollX The new scroll position\n     */\n    MDCTabScrollerFoundation.prototype.scrollToRTL_ = function (scrollX) {\n        var animation = this.getRTLScroller().scrollToRTL(scrollX);\n        this.animate_(animation);\n    };\n    /**\n     * Internal method to compute the increment scroll operation values.\n     * @param scrollX The desired scroll position increment\n     * @return MDCTabScrollerAnimation with the sanitized values for performing the scroll operation.\n     */\n    MDCTabScrollerFoundation.prototype.getIncrementScrollOperation_ = function (scrollX) {\n        if (this.isRTL_()) {\n            return this.getRTLScroller().incrementScrollRTL(scrollX);\n        }\n        var currentScrollX = this.getScrollPosition();\n        var targetScrollX = scrollX + currentScrollX;\n        var safeScrollX = this.clampScrollValue_(targetScrollX);\n        var scrollDelta = safeScrollX - currentScrollX;\n        return {\n            finalScrollPosition: safeScrollX,\n            scrollDelta: scrollDelta,\n        };\n    };\n    /**\n     * Animates the tab scrolling\n     * @param animation The animation to apply\n     */\n    MDCTabScrollerFoundation.prototype.animate_ = function (animation) {\n        var _this = this;\n        // Early exit if translateX is 0, which means there's no animation to perform\n        if (animation.scrollDelta === 0) {\n            return;\n        }\n        this.stopScrollAnimation_();\n        // This animation uses the FLIP approach.\n        // Read more here: https://aerotwist.com/blog/flip-your-animations/\n        this.adapter.setScrollAreaScrollLeft(animation.finalScrollPosition);\n        this.adapter.setScrollContentStyleProperty('transform', \"translateX(\" + animation.scrollDelta + \"px)\");\n        // Force repaint\n        this.adapter.computeScrollAreaClientRect();\n        requestAnimationFrame(function () {\n            _this.adapter.addClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);\n            _this.adapter.setScrollContentStyleProperty('transform', 'none');\n        });\n        this.isAnimating_ = true;\n    };\n    /**\n     * Stops scroll animation\n     */\n    MDCTabScrollerFoundation.prototype.stopScrollAnimation_ = function () {\n        this.isAnimating_ = false;\n        var currentScrollPosition = this.getAnimatingScrollPosition_();\n        this.adapter.removeClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);\n        this.adapter.setScrollContentStyleProperty('transform', 'translateX(0px)');\n        this.adapter.setScrollAreaScrollLeft(currentScrollPosition);\n    };\n    /**\n     * Gets the current scroll position during animation\n     */\n    MDCTabScrollerFoundation.prototype.getAnimatingScrollPosition_ = function () {\n        var currentTranslateX = this.calculateCurrentTranslateX_();\n        var scrollLeft = this.adapter.getScrollAreaScrollLeft();\n        if (this.isRTL_()) {\n            return this.getRTLScroller().getAnimatingScrollPosition(scrollLeft, currentTranslateX);\n        }\n        return scrollLeft - currentTranslateX;\n    };\n    /**\n     * Determines the RTL Scroller to use\n     */\n    MDCTabScrollerFoundation.prototype.rtlScrollerFactory_ = function () {\n        // Browsers have three different implementations of scrollLeft in RTL mode,\n        // dependent on the browser. The behavior is based off the max LTR\n        // scrollLeft value and 0.\n        //\n        // * Default scrolling in RTL *\n        //    - Left-most value: 0\n        //    - Right-most value: Max LTR scrollLeft value\n        //\n        // * Negative scrolling in RTL *\n        //    - Left-most value: Negated max LTR scrollLeft value\n        //    - Right-most value: 0\n        //\n        // * Reverse scrolling in RTL *\n        //    - Left-most value: Max LTR scrollLeft value\n        //    - Right-most value: 0\n        //\n        // We use those principles below to determine which RTL scrollLeft\n        // behavior is implemented in the current browser.\n        var initialScrollLeft = this.adapter.getScrollAreaScrollLeft();\n        this.adapter.setScrollAreaScrollLeft(initialScrollLeft - 1);\n        var newScrollLeft = this.adapter.getScrollAreaScrollLeft();\n        // If the newScrollLeft value is negative,then we know that the browser has\n        // implemented negative RTL scrolling, since all other implementations have\n        // only positive values.\n        if (newScrollLeft < 0) {\n            // Undo the scrollLeft test check\n            this.adapter.setScrollAreaScrollLeft(initialScrollLeft);\n            return new MDCTabScrollerRTLNegative(this.adapter);\n        }\n        var rootClientRect = this.adapter.computeScrollAreaClientRect();\n        var contentClientRect = this.adapter.computeScrollContentClientRect();\n        var rightEdgeDelta = Math.round(contentClientRect.right - rootClientRect.right);\n        // Undo the scrollLeft test check\n        this.adapter.setScrollAreaScrollLeft(initialScrollLeft);\n        // By calculating the clientRect of the root element and the clientRect of\n        // the content element, we can determine how much the scroll value changed\n        // when we performed the scrollLeft subtraction above.\n        if (rightEdgeDelta === newScrollLeft) {\n            return new MDCTabScrollerRTLReverse(this.adapter);\n        }\n        return new MDCTabScrollerRTLDefault(this.adapter);\n    };\n    MDCTabScrollerFoundation.prototype.isRTL_ = function () {\n        return this.adapter.getScrollContentStyleValue('direction') === 'rtl';\n    };\n    return MDCTabScrollerFoundation;\n}(MDCFoundation));\nexport { MDCTabScrollerFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCTabScrollerFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}